@{
    ViewData["Title"] = ViewBag.Chat?.Name;
}

<link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />

<div class="main-container">
    <div class="chatroom-container">
        <div class="chatroom">
        </div>
    </div>

    <div id="input-row">
        <span class="btn material-symbols-sharp">attach_file</span>
        <input id="clip-input" class="default-elem" type="file" multiple accept="image/*"
            style="position: absolute; opacity: 0;">
        <div class=" message-input-container default-elem">

            <div class="reply-panel reply-panel-disable">
                <span class="material-symbols-sharp">
                    reply
                </span>
                <img src="">
                <p></p>
                <span class="reply-cansel material-symbols-outlined">
                    close
                </span>
            </div>

            <!--div class="enable images-container">
            </div/!-->

            <img id="message-image">
            <input id="message-input" autofocus placeholder="Введите текст..." autocomplete="off" />
        </div>
        <button id="send-btn" class="btn default-elem"><span class="material-symbols-sharp">send</span></button>
    </div>
</div>

<partial name="~/Views/partials/message_template.cshtml" />
<partial name="~/Views/partials/popup-msg.cshtml" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

<script>
    let span = document.querySelector("#input-row .btn");
    let input = document.getElementById("clip-input");
    let image = document.querySelector("#message-image");
    //let imagesContainer = document.querySelector(".images-container");

    let inputRow = document.querySelector("#input-row");

    resize();

    window.addEventListener('resize', function () {
        clearTimeout(resizeTimer);
        var resizeTimer = setTimeout(function () {
            resize();
        }, 250);
    });

    span.addEventListener('mouseenter', function () {
        resize();
    });

    inputRow.addEventListener('mouseenter', function () {
        resize();
    });

    input.addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                image.src = e.target.result;
                image.classList.add("enable");

                resize();
                //image.style.opacity = 1;
                //span.style.opacity = 0;
            };
            reader.readAsDataURL(file);
        }
        else {
            image.src = "";
            image.classList.remove("enable");
            resize();
        }
    });

    function resize() {
        var sourceElementWidth = span.offsetWidth;
        var sourceElementHeight = span.offsetHeight;
        input.style.width = sourceElementWidth + 'px';
        input.style.height = sourceElementHeight + 'px';
    }
</script>

<script>
    var SendBtn = document.getElementById("send-btn");
    var MessageInput = document.getElementById("message-input");
    var MessageImage = document.getElementById("message-image");
    var ClipInput = document.getElementById("clip-input");
    var ChatRoom = document.querySelector(".chatroom");
    var ScrollCont = document.querySelector(".chatroom-container");

    var replyMessage = null;

    var hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/Chat")
        .build();
    //hubConnection.start();

    MessageInput.addEventListener('keydown', function (e) {
        if (e.keyCode === 13) {
            sendMessage();
        }
    });

    SendBtn.onclick = () => {
        sendMessage();
    }

    hubConnection.on("ReceiveMessage", function (message) {
        var id = getCookie("id");
        if (message.senderId == id)
            printMessage(message, "my-message");
        else
            printMessage(message, "other-message");
    });

    hubConnection.on("DeleteMessage", function (message) {
        var messageDoc = document.getElementById("message-" + message.id);
        if (messageDoc)
            messageDoc.remove();
    });

    function getCookie(name) {
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }

    async function printMessage(message, classes) {
        var template = document.getElementById("message-template");
        var mesElem = template.content.cloneNode(true);

        var paragraph = mesElem.querySelector(".message-text");
        paragraph.appendChild(document.createTextNode(message.text));

        var image = mesElem.querySelector(".message-image");
        image.src = message.file;
        if (message.file == null)
            image.classList.add('hidden');

        var date = mesElem.getElementById("date-message");
        var messageDate = new Date(message.date);
        date.appendChild(document.createTextNode(getNiceDate(messageDate)));

        var senderIdInput = mesElem.querySelector("input[name='senderId']");
        senderIdInput.value = message.senderId;

        var name = mesElem.getElementById("name-message");
        //if (message.sender != null)
        name.appendChild(document.createTextNode(message.sender?.name));

        paragraph.parentNode.classList.add(classes);

        if (message.replyMessageId != null) {
            mesElem.querySelector('.reply-panel p').textContent = message.replyMessage?.text == "" ? "image" : message.replyMessage?.text;
            if (message.replyMessage?.file != null && message.replyMessage?.file != "http://localhost:5205/Chat/null") {
                const imageReplyPanel = mesElem.querySelector('.reply-panel img');
                imageReplyPanel.style.display = 'flex';
                imageReplyPanel.src = message.replyMessage?.file;
            }
            mesElem.querySelector('.reply-panel').classList.remove('reply-panel-disable');
        }

        var m = mesElem.querySelector(".message-image").parentNode;
        ChatRoom.appendChild(mesElem);

        m.dataset.messageId = message.id;
        m.id = "message-" + message.id;

        m.addEventListener("contextmenu", function (event) {
            event.preventDefault();

            var messageId = event.target.closest('.message').dataset.messageId;
            var messageDoc = document.getElementById("message-" + messageId);

            callPopup(event, messageDoc);
        });

        ScrollCont.scrollTop = 9999;
    }

    async function sendMessage() {
        var text = MessageInput.value;
        var image = ClipInput.files[0];

        if (text == "" && image == null)
            return;

        if (image) {
            var path = await uploadImage(image);

            if (path != null) {
                var message = {
                    ChatId: @ViewBag.Chat?.Id,
                    SenderId: @ViewBag.User.Id,
                    text: text,
                    file: path,
                    sender: null,
                    date: new Date(),
                    ReplyMessageId: replyMessage?.Id
                    //ReplyMessage: replyMessage
                };
                hubConnection.invoke("Send", message);
            }
        }
        else {
            var message = {
                ChatId: @ViewBag.Chat?.Id,
                SenderId: @ViewBag.User.Id,
                text: text,
                sender: null,
                date: new Date(),
                ReplyMessageId: replyMessage?.Id
                //ReplyMessage: replyMessage
            };
            hubConnection.invoke("Send", message);
        }

        hideReplyPanel();
        replyMessage = null;

        //printMessage(message, "my-message");

        MessageInput.value = "";
        ClipInput.value = null;
        MessageImage.src = "";
        MessageImage.classList.remove("enable");
    }

    async function uploadImage(image) {
        try {
            var formData = new FormData();
            formData.append('file', image);

            const response = await fetch('/Chat/UploadMessageImage/', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error('Ошибка загрузки изображения');
            }

            const data = await response.json();
            console.log('Ссылка на изображение:', data.imageUrl);
            return data.imageUrl;
        }
        catch (error) {
            console.error('Произошла ошибка:', error);
            return "";
        }
    }

    function getNiceDate(fullDate) {
        var options = {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric'
        };

        var dateStr = fullDate.toLocaleString('ru-RU', options);
        return dateStr;
    }

    hubConnection.start()
        .then(function () {
            hubConnection.invoke("JoinAsync", @ViewBag.Chat.Id);
        });
</script>

<script>
    const enableClass = "popup-visible";
    const popup = document.querySelector('.popup');
    const popupReply = document.querySelector('.popup .reply-btn');
    const popupEdit = document.querySelector('.popup .edit-btn');
    const popupDelete = document.querySelector('.popup .delete-btn');

    const replyPanel = document.querySelector("#input-row .reply-panel");
    const imageReplyPanel = replyPanel.querySelector('img');
    const textReplyPanel = replyPanel.querySelector('p');
    const closeReplyPanel = replyPanel.querySelector('.reply-cansel');
    const replyPanelDisable = "reply-panel-disable";

    var popupMessage;

    document.addEventListener('contextmenu', function (e) {
        e.preventDefault();
    });

    popup.addEventListener("mouseleave", function (event) {
        hidePopup();
    });

    function callPopup(e, m) {
        if (!popup.classList.contains(enableClass))
            popup.classList.add(enableClass);
        popup.style.left = 'calc(' + e.pageX + 'px - 5rem';
        popup.style.top = 'calc(' + e.pageY + 'px - calc((3rem * 3 + 2rem) * 0.5)';

        popupMessage = {
            Id: parseInt(m.dataset.messageId),
            ChatId: @ViewBag.Chat?.Id,
            SenderId: parseInt(m.querySelector("input[name='senderId']").value),
            text: m.querySelector(".message-text").textContent,
            file: m.querySelector(".message-image").src,
            sender: null
        };
    }

    function hidePopup() {
        if (popup.classList.contains(enableClass))
            popup.classList.remove(enableClass);
        popupMessage = null;
    }

    document.addEventListener('click', function (e) {
        hidePopup();
    });

    popupReply.addEventListener('click', () => {
        replyMessage = popupMessage;
        popupMessage = null;

        textReplyPanel.textContent = replyMessage?.text == "" ? "image" : replyMessage?.text;
        if (replyMessage?.file != null && replyMessage?.file != "http://localhost:5205/Chat/null") {
            imageReplyPanel.style.display = 'flex';
            imageReplyPanel.src = replyMessage?.file;
        }

        if (replyPanel.classList.contains(replyPanelDisable))
            replyPanel.classList.remove(replyPanelDisable);
    });

    function hideReplyPanel() {
        if (!replyPanel.classList.contains(replyPanelDisable))
            replyPanel.classList.add(replyPanelDisable);
        textReplyPanel.textContent = null;
        imageReplyPanel.src = null;
        imageReplyPanel.style.display = 'none';
        popupMessage = null;
    }

    closeReplyPanel.addEventListener('click', () => {
        hideReplyPanel();
    });

    popupDelete.addEventListener('click', () => {
        hubConnection.invoke("Delete", popupMessage);
        hidePopup();
        hideReplyPanel();
    });
</script>