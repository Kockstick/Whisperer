@{
    ViewData["Title"] = ViewBag.Chat?.Name;
}

<link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />

<div class="main-container">
    <div class="chatroom-container">
        <div class="chatroom">
        </div>
    </div>

    <div id="input-row">
        <span class="btn material-symbols-sharp">attach_file</span>
        <input id="clip-input" class="default-elem" type="file" multiple accept="image/*"
            style="position: absolute; opacity: 0;">
        <div class=" message-input-container default-elem">
            <!--div class="enable images-container">
            </div/!-->
            <img id="message-image">
            <input id="message-input" autofocus placeholder="Type something..." autocomplete="off" />
        </div>
        <button id="send-btn" class="btn default-elem"><span class="material-symbols-sharp">send</span></button>
    </div>
</div>

<partial name="~/Views/partials/message_template.cshtml" />


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

<script>
    let span = document.querySelector("#input-row .btn");
    let input = document.getElementById("clip-input");
    let image = document.querySelector("#message-image");
    //let imagesContainer = document.querySelector(".images-container");

    let inputRow = document.querySelector("#input-row");

    resize();

    window.addEventListener('resize', function () {
        clearTimeout(resizeTimer);
        var resizeTimer = setTimeout(function () {
            resize();
        }, 250);
    });

    span.addEventListener('mouseenter', function () {
        resize();
    });

    inputRow.addEventListener('mouseenter', function () {
        resize();
    });

    input.addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                image.src = e.target.result;
                image.classList.add("enable");

                resize();
                //image.style.opacity = 1;
                //span.style.opacity = 0;
            };
            reader.readAsDataURL(file);
        }
        else {
            image.src = "";
            image.classList.remove("enable");
            resize();
        }
    });

    function resize() {
        var sourceElementWidth = span.offsetWidth;
        var sourceElementHeight = span.offsetHeight;
        input.style.width = sourceElementWidth + 'px';
        input.style.height = sourceElementHeight + 'px';
    }
</script>

<script>
    var SendBtn = document.getElementById("send-btn");
    var MessageInput = document.getElementById("message-input");
    var MessageImage = document.getElementById("message-image");
    var ClipInput = document.getElementById("clip-input");
    var ChatRoom = document.querySelector(".chatroom");
    var ScrollCont = document.querySelector(".chatroom-container");

    var hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/Chat")
        .build();
    //hubConnection.start();

    MessageInput.addEventListener('keydown', function (e) {
        if (e.keyCode === 13) {
            sendMessage();
        }
    });

    SendBtn.onclick = () => {
        sendMessage();
    }

    hubConnection.on("SendMessage", function (message) {
        /*if (Request.Cookies["id"].Value == null)
            return;*/
        //let id = Request.Cookies["id"].Value;
        var id = getCookie("id");
        if (message.senderId == id)
            printMessage(message, "my-message");
        else
            printMessage(message, "other-message");
    });

    function getCookie(name) {
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }

    async function printMessage(message, classes) {
        var template = document.getElementById("message-template");
        var mesElem = template.content.cloneNode(true);

        var paragraph = mesElem.querySelector("p");
        paragraph.appendChild(document.createTextNode(message.text));

        var image = mesElem.querySelector("img");
        image.src = message.file;
        if (message.file == null)
            image.classList.add('hidden');

        var date = mesElem.getElementById("date-message");
        var messageDate = new Date(message.date);
        date.appendChild(document.createTextNode(getNiceDate(messageDate)));

        var name = mesElem.getElementById("name-message");
        //if (message.sender != null)
        name.appendChild(document.createTextNode(message.sender?.name));

        paragraph.parentNode.classList.add(classes);

        var firstEl = ChatRoom.firstChild;

        ChatRoom.appendChild(mesElem);

        ScrollCont.scrollTop = 9999;
    }

    async function sendMessage() {
        var text = MessageInput.value;
        var image = ClipInput.files[0];

        if (text == "" && image == null)
            return;

        if (image) {
            var path = await uploadImage(image);

            if (path != null) {
                var message = {
                    ChatId: @ViewBag.Chat?.Id,
                    SenderId: @ViewBag.User.Id,
                    text: text,
                    file: path,
                    sender: null,
                    date: new Date()
                };
                hubConnection.invoke("Send", message);
            }
        }
        else {
            var message = {
                ChatId: @ViewBag.Chat?.Id,
                SenderId: @ViewBag.User.Id,
                text: text,
                sender: null,
                date: new Date()
            };
            hubConnection.invoke("Send", message);
        }

        //printMessage(message, "my-message");

        MessageInput.value = "";
        ClipInput.value = null;
        MessageImage.src = "";
        MessageImage.classList.remove("enable");
    }

    async function uploadImage(image) {
        try {
            var formData = new FormData();
            formData.append('file', image);

            const response = await fetch('/Chat/UploadMessageImage/', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error('Ошибка загрузки изображения');
            }

            const data = await response.json();
            console.log('Ссылка на изображение:', data.imageUrl);
            return data.imageUrl;
        }
        catch (error) {
            console.error('Произошла ошибка:', error);
            return "";
        }
    }

    function getNiceDate(fullDate) {
        var options = {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric'
        };

        var dateStr = fullDate.toLocaleString('ru-RU', options);
        return dateStr;
    }

    hubConnection.start()
        .then(function () {
            hubConnection.invoke("JoinAsync", "@ViewBag.Chat.Name");
        });
</script>